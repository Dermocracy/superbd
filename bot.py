# bot.py
import telebot
from telebot import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils.markdown import text, hlink
import asyncio
import uuid


import psycopg2
from datetime import datetime
import logging

sent_messages = []

from database import (add_user, get_user_by_tg_id, add_message, list_projects, get_messages_by_parent_id, get_node_by_id,
                      create_project, add_user_to_project_in_db, remove_user_from_project_in_db, get_projects_for_user,
                      update_user_role_in_project_in_db, get_project, update_project, delete_project,
                      create_task, get_root_node, get_project_by_id, is_user_in_project, search_tasks_and_projects,
                      cursor)
import database

API_TOKEN = '6054540829:AAHxxfRyImxaWZQPSWIL5B5zHyD275WbWK4'
bot = telebot.TeleBot(API_TOKEN)
bot_id = bot.get_me().id


class MessageInputState(StatesGroup):
    waiting_for_text = State()


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    user = get_user_by_tg_id(user_id)
    if not user:
        add_user(user_id, username, first_name, last_name)
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# 123
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã To-do", "üîç –ü–æ–∏—Å–∫")
    markup.row("üìÅ –ü—Ä–æ–µ–∫—Ç—ã", "üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    return markup


@bot.message_handler(func=lambda message: message.text == "üìÅ –ü—Ä–æ–µ–∫—Ç—ã")
def handle_projects(message):
    display_projects(message)


@bot.message_handler(func=lambda message: message.text == "üìã To-do")
def handle_todo(message):
    pass  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "To-do"


@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
def handle_search(message):
    search(message)


@bot.message_handler(func=lambda message: message.text == "üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
def handle_databases(message):
    pass  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"


@bot.callback_query_handler(func=lambda call: call.data == "create_project")
def on_create_project_button_pressed(call):
    bot.answer_callback_query(call.id)
    create_project_workflow(call.from_user.id)


def create_project_workflow(user_id):
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, on_project_name_received, user_id)


def on_project_name_received(message, user_id):
    if message.chat.id == user_id:
        project_name = message.text
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        bot.register_next_step_handler(msg, on_project_description_received, user_id, project_name)


def on_project_description_received(message, user_id, project_name):
    if message.chat.id == user_id:
        project_description = message.text
        database.create_project(project_name, project_description, user_id)
        bot.send_message(user_id, "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", reply_markup=main_menu())


def create_root_node():
    return {
        'id': str(uuid.uuid4()),
        'user_id': None,
        'project_id': None,
        'parent_id': None,
        'title': '–ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª',
        'content': None,
        'date_created': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'last_modified': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }


nodes = []
adding_message_data = {}
root_node = create_root_node()





def create_default_project(user_id):
    default_project_title = '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç'
    default_project_description = '–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.'
    create_project(default_project_title, default_project_description, user_id)


def display_projects(message):
    global sent_messages

    user_id = message.from_user.id
    projects = get_projects_for_user(user_id)

    if not projects:
        create_default_project(user_id)
        projects = get_projects_for_user(user_id)
        bot.send_message(user_id, "–ú—ã —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    if projects:
        bot.send_message(user_id, "–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:")
        sent_messages = []
        for project in projects:
            project_id = project[0]
            project_title = project[1]
            project_description = project[2]

            markup = types.InlineKeyboardMarkup()
            open_project_button = types.InlineKeyboardButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç",
                                                             callback_data=f"open_project:{project_id}")
            markup.add(open_project_button)

            project_text = f"{project_title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {project_description}"
            sent_msg = bot.send_message(user_id, project_text, reply_markup=markup)
            sent_messages.append(sent_msg.message_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    create_project_markup = types.InlineKeyboardMarkup()
    create_project_button = types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project")
    create_project_markup.add(create_project_button)
    create_project_msg = bot.send_message(user_id, "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:", reply_markup=create_project_markup)
    sent_messages.append(create_project_msg.message_id)


def add_user_to_project(message, project_id, user_id, role):
    if not is_user_in_project(message.from_user.id, project_id):
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç—É —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
    add_user_to_project_in_db(project_id, user_id, role)


def remove_user_from_project(message, project_id, user_id):
    if not is_user_in_project(message.from_user.id, project_id):
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    remove_user_from_project_in_db(project_id, user_id)


def change_role_in_project(message, project_id, user_id, new_role):
    if not is_user_in_project(message.from_user.id, project_id):
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
    update_user_role_in_project_in_db(project_id, user_id, new_role)


def add_user_to_project_workflow(message, project_id):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    bot.register_next_step_handler(msg, on_add_user_id_received, project_id)


def on_add_user_id_received(message, project_id):
    try:
        user_id = int(message.text)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n1. MEMBER\n2. ADMIN")
        bot.register_next_step_handler(msg, on_role_selection_received, project_id, user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


def on_role_selection_received(message, project_id, user_id):
    selected_role = message.text.upper()
    if selected_role in ['1', 'MEMBER', '2', 'ADMIN']:
        if selected_role == '1':
            selected_role = 'MEMBER'
        elif selected_role == '2':
            selected_role = 'ADMIN'
        add_user_to_project_in_db(project_id, user_id, selected_role)
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


def change_user_role_workflow(message, project_id):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:")
    bot.register_next_step_handler(msg, on_change_role_user_id_received, project_id)


def on_change_role_user_id_received(message, project_id):
    try:
        user_id = int(message.text)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n1. MEMBER\n2. ADMIN")
        bot.register_next_step_handler(msg, on_new_role_selection_received, project_id, user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


def on_new_role_selection_received(message, project_id, user_id):
    new_role = message.text.upper()
    if new_role in ['1', 'MEMBER', '2', 'ADMIN']:
        if new_role == '1':
            new_role = 'MEMBER'
        elif new_role == '2':
            new_role = 'ADMIN'
        change_role_in_project(message, project_id, user_id, new_role)
        bot.send_message(message.chat.id, "–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


def remove_user_from_project_workflow(message, project_id):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, on_remove_user_id_received, project_id)


def on_remove_user_id_received(message, project_id):
    try:
        user_id = int(message.text)
        remove_user_from_project(message, project_id, user_id)
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


def manage_project(message, project_id):
    user_id = message.chat.id
    project = get_project_by_id(project_id)

    if not project or not is_user_in_project(user_id, project_id):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.row("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üîô –ù–∞–∑–∞–¥")
    msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º:", reply_markup=markup)

    bot.register_next_step_handler(msg, on_management_option_selected, project_id)


def on_management_option_selected(message, project_id):
    option = message.text

    if option == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        add_user_to_project_workflow(message, project_id)
    elif option == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        change_user_role_workflow(message, project_id)
    elif option == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        remove_user_from_project_workflow(message, project_id)
    elif option == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


def open_project(call, project_id):
    global sent_messages

    user_id = call.from_user.id
    project = get_project_by_id(project_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for message_id in sent_messages:
        try:
            bot.delete_message(user_id, message_id)
        except Exception as e:
            print(f"Error deleting message: {e}")

    sent_messages = []

    if project is not None:
        root_node = get_root_node(project_id)

        if root_node is not None:
            fake_callback_query = types.CallbackQuery(id=0, from_user=call.from_user, message=call.message,
                                                      data=call.data, chat_instance='', json_string='')

            open_node_handler(fake_callback_query)
        else:
            bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –ø—Ä–æ–µ–∫—Ç–∞.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_markup = types.InlineKeyboardMarkup(row_width=1)
        add_task_button = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_task:{project_id}")
        add_message_button = types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                                        callback_data=f"add_message:{project_id}")
        close_button = types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_project:{project_id}")

        manage_project_button = types.InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º",
                                                           callback_data=f"manage_project:{project_id}")
        actions_markup.add(add_task_button, add_message_button, manage_project_button, close_button)

        actions_msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=actions_markup)
        sent_messages.append(actions_msg.message_id)  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É


@bot.callback_query_handler(func=lambda call: call.data.startswith("close_project:"))
def close_project_handler(call):
    project_id = int(call.data.split(":")[1])
    close_project(call)


def close_project(call):
    user_id = call.from_user.id
    bot.delete_message(user_id, call.message.message_id)  # —É–¥–∞–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
def on_inline_button_click(call):
    user_id = call.from_user.id
    data = call.data

    if data.startswith("manage_project:"):
        project_id = int(data.split(":")[1])
        manage_project(call.message, project_id)
    elif data.startswith("open_tasks:"):
        project_id = int(data.split(":")[1])
        display_tasks(call.message, project_id)
    elif data.startswith("open_messages:"):
        project_id = int(data.split(":")[1])
        display_messages(call.message, project_id)
    elif data.startswith("open_project:"):
        logging.basicConfig(level=logging.INFO)
        logging.info(f"Open project: {project_id}")
        project_id = int(data.split(":")[1])
        open_project(call.message, project_id)
    # ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_data


@bot.callback_query_handler(func=lambda call: call.data.startswith("open_node"))
def open_node_handler(call):
    node_id = int(call.data.split(":")[1])
    display_node(call, node_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("close_node"))
def close_node_handler(call):
    node_id = int(call.data.split(":")[1])
    display_node(call, node_id, go_back=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("add_task"))
def add_task_handler(call):
    project_id = int(call.data.split(":")[1])
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∑–ª–∞


@bot.callback_query_handler(func=lambda call: call.data.startswith('open_project:'))
def open_project_handler(call):
    project_id = int(call.data.split(':')[1])
    open_project(call, project_id)


def add_task_workflow(message, project_id):
    user_id = message.chat.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(msg, on_task_name_received, project_id)


def on_task_name_received(message, project_id):
    user_id = message.chat.id
    task_name = message.text
    create_task(task_name, project_id, user_id)
    bot.send_message(user_id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=main_menu())


def display_tasks(message, project_id):
    user_id = message.chat.id
    tasks = get_tasks(project_id)

    if tasks:
        bot.send_message(user_id, "–ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
        for task in tasks:
            task_id = task[0]
            task_title = task[1]

            markup = types.InlineKeyboardMarkup()
            manage_button = types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_task:{task_id}")
            markup.add(manage_button)

            bot.send_message(user_id, task_title, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–¥–∞—á.")


def add_message_workflow(message, project_id):
    user_id = message.chat.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, on_message_text_received, project_id)


def on_message_text_received(message, project_id):
    user_id = message.chat.id
    message_text = message.text
    add_message(bot, user_id, project_id, None, message_text, None)  # –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä user_id –∑–¥–µ—Å—å
    bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")


def display_messages(message, project_id):
    user_id = message.chat.id
    messages = get_messages(project_id)

    if messages:
        bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
        for msg in messages:
            message_id = msg[0]
            message_text = msg[1]

            markup = types.InlineKeyboardMarkup()
            manage_button = types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_message:{message_id}")
            markup.add(manage_button)

            bot.send_message(user_id, message_text, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")


def create_microproject(message, task_id):
    user_id = message.from_user.id
    task = get_task_by_id(task_id)

    if not task or not is_user_in_project(user_id, task['project_id']):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Ä–æ–ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á –∏ —Ç.–¥.
    pass


def manage_microproject(message, task_id):
    user_id = message.from_user.id
    task = get_task_by_id(task_id)

    if not task or not is_user_in_project(user_id, task['project_id']):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ–ø—Ä–æ–µ–∫—Ç—É.")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ–ø—Ä–æ–µ–∫—Ç–æ–º,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —Ç.–¥.
    pass


def set_deadline(message, task_id):
    user_id = message.from_user.id
    task = get_task_by_id(task_id)

    if not task or not is_user_in_project(user_id, task['project_id']):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.")
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):")

    @bot.message_handler(func=lambda m: True)
    def on_deadline_received(m):
        deadline = m.text
        try:
            set_task_deadline(task_id, deadline)
            bot.send_message(user_id, "–î–µ–¥–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu())
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def search(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    @bot.message_handler(func=lambda m: True)
    def on_search_query_received(m):
        search_query = m.text
        results = search_tasks_and_projects(user_id, search_query)

        if not results:
            bot.send_message(user_id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        for result in results:
            item_type = result['type']
            item_title = result['title']
            item_description = result['description']

            if item_type == 'task':
                task_id = result['id']
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                bot.send_message(user_id, f"–ó–∞–¥–∞—á–∞: {item_title}\n\n{item_description}")
            elif item_type == 'project':
                project_id = result['id']
                markup = types.InlineKeyboardMarkup()
                manage_button = types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_project:{project_id}")
                markup.add(manage_button)
                bot.send_message(user_id, f"–ü—Ä–æ–µ–∫—Ç: {item_title}\n\n{item_description}", reply_markup=markup)


# ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)

def process_media(message, project_id):
    if message.content_type == 'photo':
        media_type = 'photo'
        media_url = message.photo[-1].file_id
    elif message.content_type == 'video':
        media_type = 'video'
        media_url = message.video.file_id
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω.", reply_markup=markup)
        return
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    add_message(project_id, None, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª", None, media_type, media_url)
    bot.send_message(message.chat.id, "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω.")


def display_node(call, node_id):
    user_id = call.message.chat.id
    node = get_node_by_id(node_id)
    message_text = node['title']
    if node['content']:
        message_text += "\n\n" + node['content']

    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"add_message:{node_id}"))
    bot.send_message(user_id, message_text, parse_mode='HTML', reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id
    adding_message_data[user_id] = (node['project_id'], node_id)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    child_nodes = get_nodes_by_project_id(node['project_id'], node['parent_id'])
    for child_node in child_nodes:
        title = child_node['title']
        if child_node['content']:
            title += "\n\n" + child_node['content']
        markup_child = types.InlineKeyboardMarkup()
        markup_child.add(types.InlineKeyboardButton(text=title, callback_data=f"open_node:{child_node['id']}"))
        bot.send_message(user_id, "", reply_markup=markup_child)


def display_node(call, node_id):
    user_id = call.message.chat.id
    node = get_node_by_id(node_id)

    if node is None:
        bot.send_message(user_id, "–£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    message_text = node['title']
    if node['content']:
        message_text += "\n\n" + node['content']

    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"add_message:{node_id}"))
    bot.send_message(user_id, message_text, parse_mode='HTML', reply_markup=markup)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    child_nodes = get_nodes_by_project_id(node['project_id'], node['parent_id'])
    for child_node in child_nodes:
        title = child_node['title']
        if child_node['content']:
            title += "\n\n" + child_node['content']
        markup_child = types.InlineKeyboardMarkup()
        markup_child.add(types.InlineKeyboardButton(text=title, callback_data=f"open_node:{child_node['id']}"))
        bot.send_message(user_id, "", reply_markup=markup_child)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    actions_markup = types.InlineKeyboardMarkup()

    if node['parent_id'] is not None:
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_node:{node['id']}")
        actions_markup.add(back_button)

    close_button = types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_project")
    actions_markup.add(close_button)

    add_file_button = types.InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ",
                                                 callback_data=f"add_file:{node['id']}")
    actions_markup.add(add_file_button)

    main_menu_button = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    actions_markup.add(main_menu_button)

    sent_msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=actions_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("open_node:"))
def open_node_handler(call):
    node_id = int(call.data.split(":")[1])
    display_node(call, node_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("back_node:"))
def back_node_handler(call):
    node_id = int(call.data.split(":")[1])
    display_node(call, node_id, go_back=True)


@bot.callback_query_handler(func=lambda call: call.data == "add_file")
def add_file_handler(call):
    bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


def process_message_text(message, project_id):
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ add_message
    # —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ, –º—ã –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞ (parent_id=None).
    add_message(project_id, None, message.text, None)
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")


@bot.message_handler(content_types=['photo', 'video'])
def handle_media_message(message):
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ add_message
    # —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    pass


adding_message_data = {}


def filter_add_message(call):
    return call.data.startswith("add_message:")


@bot.callback_query_handler(func=filter_add_message)
@bot.callback_query_handler(func=filter_add_message)
@bot.callback_query_handler(func=filter_add_message)
def add_message_handler(call):
    user_id = call.message.chat.id
    _, parent_id = call.data.split(":")
    adding_message_data[user_id] = (parent_id,)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")


@bot.callback_query_handler(func=lambda call: call.data.startswith("manage_project:"))
def manage_project_handler(call):
    project_id = int(call.data.split(":")[1])
    manage_project(call.message, project_id)


@bot.message_handler(content_types=['text'])
def text_message_handler(message):
    user_id = message.chat.id
    content = message.text

    if user_id in adding_message_data:
        parent_id = adding_message_data[user_id][0]

        if parent_id != root_node['id']:
            node = get_node_by_id(parent_id)

            if node is not None:
                project_id = node['project_id']
                add_message(bot, user_id, project_id, parent_id, content)
                adding_message_data[user_id] = None
                bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")
            else:
                bot.send_message(user_id, "–û—à–∏–±–∫–∞: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(user_id,
                             "–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —É–∑–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É–∑–µ–ª.")
    else:
        bot.send_message(user_id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
