# bot.py
import telebot
from telebot import types
import psycopg2
from datetime import datetime

from database import (add_user, get_user_by_tg_id, update_user, delete_user,
                      create_project,add_user_to_project_in_db, remove_user_from_project_in_db, update_user_role_in_project_in_db, get_project, update_project, delete_project,
                      create_task, get_task, update_task, delete_task,
                      create_custom_database,get_projects_by_owner_id, get_project_by_id, is_user_in_project, search_tasks_and_projects, cursor)
import database

API_TOKEN = '6054540829:AAHxxfRyImxaWZQPSWIL5B5zHyD275WbWK4'
bot = telebot.TeleBot(API_TOKEN)
bot_id = bot.get_me().id


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    user = get_user_by_tg_id(user_id)
    if not user:
        add_user(user_id, username, first_name, last_name)
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
#123
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã To-do", "üîç –ü–æ–∏—Å–∫")
    markup.row("üìÅ –ü—Ä–æ–µ–∫—Ç—ã", "üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    return markup

@bot.message_handler(func=lambda message: message.text == "üìÅ –ü—Ä–æ–µ–∫—Ç—ã")
def handle_projects(message):
    display_projects(message)
    
@bot.message_handler(func=lambda message: message.text == "üìã To-do")
def handle_todo(message):
    pass  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "To-do"

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
def handle_search(message):
    search(message)

@bot.message_handler(func=lambda message: message.text == "üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
def handle_databases(message):
    pass  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

@bot.callback_query_handler(func=lambda call: call.data == "create_project")
def on_create_project_button_pressed(call):
    bot.answer_callback_query(call.id)
    create_project_workflow(call.from_user.id)


def create_project_workflow(user_id):
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, on_project_name_received, user_id)

def on_project_name_received(message, user_id):
    if message.chat.id == user_id:
        project_name = message.text
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        bot.register_next_step_handler(msg, on_project_description_received, user_id, project_name)

def on_project_description_received(message, user_id, project_name):
    if message.chat.id == user_id:
        project_description = message.text
        database.create_project(project_name, project_description, user_id)
        bot.send_message(user_id, "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", reply_markup=main_menu())

def get_projects_for_user(user_id):
    query = '''
    SELECT projects.id, projects.title
    FROM projects
    INNER JOIN user_projects ON projects.id = user_projects.project_id
    INNER JOIN users ON user_projects.user_id = users.id
    WHERE users.telegram_id = %s
    '''
    cursor.execute(query, (user_id,))
    return cursor.fetchall()


def create_default_project(user_id):
    default_project_title = '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç'
    default_project_description = '–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.'
    create_project(default_project_title, default_project_description, user_id)


def display_projects(message):
    user_id = message.from_user.id
    projects = get_projects_for_user(user_id)

    if not projects:
        create_default_project(user_id)
        projects = get_projects_for_user(user_id)
        bot.send_message(user_id, "–ú—ã —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    if projects:
        bot.send_message(user_id, "–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:")
        for project in projects:
            project_id = project[0]
            project_title = project[1]

            markup = types.InlineKeyboardMarkup()
            manage_button = types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_project:{project_id}")
            open_tasks_button = types.InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data=f"open_tasks:{project_id}")
            open_messages_button = types.InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"open_messages:{project_id}")
            markup.add(manage_button, open_tasks_button, open_messages_button)

            bot.send_message(user_id, project_title, reply_markup=markup)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    create_project_markup = types.InlineKeyboardMarkup()
    create_project_button = types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project")
    create_project_markup.add(create_project_button)
    bot.send_message(user_id, "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:", reply_markup=create_project_markup)




def add_user_to_project(message, project_id, user_id, role):
    if not is_user_in_project(message.from_user.id, project_id):
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return



    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç—É —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
    add_user_to_project_in_db(project_id, user_id, role)



def remove_user_from_project(message, project_id, user_id):
    if not is_user_in_project(message.from_user.id, project_id):
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    remove_user_from_project_in_db(project_id, user_id)

def change_role_in_project(message, project_id, user_id, new_role):
    if not is_user_in_project(message.from_user.id, project_id):
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
    update_user_role_in_project_in_db(project_id, user_id, new_role)

def add_user_to_project_workflow(message, project_id):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    bot.register_next_step_handler(msg, on_add_user_id_received, project_id)

def on_add_user_id_received(message, project_id):
    try:
        user_id = int(message.text)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n1. MEMBER\n2. ADMIN")
        bot.register_next_step_handler(msg, on_role_selection_received, project_id, user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def on_role_selection_received(message, project_id, user_id):
    selected_role = message.text.upper()
    if selected_role in ['1', 'MEMBER', '2', 'ADMIN']:
        if selected_role == '1':
            selected_role = 'MEMBER'
        elif selected_role == '2':
            selected_role = 'ADMIN'
        add_user_to_project_in_db(project_id, user_id, selected_role)
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def change_user_role_workflow(message, project_id):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:")
    bot.register_next_step_handler(msg, on_change_role_user_id_received, project_id)

def on_change_role_user_id_received(message, project_id):
    try:
        user_id = int(message.text)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n1. MEMBER\n2. ADMIN")
        bot.register_next_step_handler(msg, on_new_role_selection_received, project_id, user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def on_new_role_selection_received(message, project_id, user_id):
    new_role = message.text.upper()
    if new_role in ['1', 'MEMBER', '2', 'ADMIN']:
        if new_role == '1':
            new_role = 'MEMBER'
        elif new_role == '2':
            new_role = 'ADMIN'
        change_role_in_project(message, project_id, user_id, new_role)
        bot.send_message(message.chat.id, "–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def remove_user_from_project_workflow(message, project_id):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, on_remove_user_id_received, project_id)

def on_remove_user_id_received(message, project_id):
    try:
        user_id = int(message.text)
        remove_user_from_project(message, project_id, user_id)
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")



def manage_project(message, project_id):
    user_id = message.chat.id
    project = get_project_by_id(project_id)

    if not project or not is_user_in_project(user_id, project_id):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.row("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üîô –ù–∞–∑–∞–¥")
    msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º:", reply_markup=markup)

    bot.register_next_step_handler(msg, on_management_option_selected, project_id)

def on_management_option_selected(message, project_id):
    option = message.text

    if option == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        add_user_to_project_workflow(message, project_id)
    elif option == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        change_user_role_workflow(message, project_id)
    elif option == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        remove_user_from_project_workflow(message, project_id)
    elif option == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")



def open_project(message, project_id):
    user_id = message.chat.id
    project = get_project_by_id(project_id)

    if not project or not is_user_in_project(user_id, project_id):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏")
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    markup.row("üîô –ù–∞–∑–∞–¥")

    msg = bot.send_message(user_id, f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–æ–µ–∫—Ç '{project['title']}'. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(msg, on_project_option_selected, project_id)

def on_project_option_selected(message, project_id):
    option = message.text

    if option == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        add_task_workflow(message, project_id)
    elif option == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏":
        display_tasks(message, project_id)
    elif option == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        add_message_workflow(message, project_id)
    elif option == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è":
        display_messages(message, project_id)
    elif option == "üîô –ù–∞–∑–∞–¥":
        manage_project(message, project_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
def on_inline_button_click(call):
    user_id = call.from_user.id
    data = call.data

    if data.startswith("manage_project:"):
        project_id = int(data.split(":")[1])
        manage_project(call.message, project_id)
    elif data.startswith("open_tasks:"):
        project_id = int(data.split(":")[1])
        display_tasks(call.message, project_id)
    elif data.startswith("open_messages:"):
        project_id = int(data.split(":")[1])
        display_messages(call.message, project_id)
    # ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_data


@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    data = call.data.split(':')
    action, value = data[0], data[1]

    user_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º
    if not call.from_user.is_bot:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback_data
        if action == "manage_project":
            project_id = int(value)
            manage_project(call.message, project_id)
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫)





def add_task_workflow(message, project_id):
    user_id = message.chat.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(msg, on_task_name_received, project_id)

def on_task_name_received(message, project_id):
    user_id = message.chat.id
    task_name = message.text
    create_task(task_name, project_id, user_id)
    bot.send_message(user_id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=main_menu())

def display_tasks(message, project_id):
    user_id = message.chat.id
    tasks = get_tasks(project_id)

    if tasks:
        bot.send_message(user_id, "–ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
        for task in tasks:
            task_id = task[0]
            task_title = task[1]

            markup = types.InlineKeyboardMarkup()
            manage_button = types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_task:{task_id}")
            markup.add(manage_button)

            bot.send_message(user_id, task_title, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–¥–∞—á.")

def add_message_workflow(message, project_id):
    user_id = message.chat.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, on_message_text_received, project_id)

def on_message_text_received(message, project_id):
    user_id = message.chat.id
    message_text = message.text
    create_message(message_text, project_id, user_id)
    bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.", reply_markup=main_menu())

def display_messages(message, project_id):
    user_id = message.chat.id
    messages = get_messages(project_id)

    if messages:
        bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
        for msg in messages:
            message_id = msg[0]
            message_text = msg[1]

            markup = types.InlineKeyboardMarkup()
            manage_button = types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_message:{message_id}")
            markup.add(manage_button)

            bot.send_message(user_id, message_text, reply_markup=markup)
    else:
        bot.send_message(user_id, "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")


def create_microproject(message, task_id):
    user_id = message.from_user.id
    task = get_task_by_id(task_id)

    if not task or not is_user_in_project(user_id, task['project_id']):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Ä–æ–ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á –∏ —Ç.–¥.
    pass

def manage_microproject(message, task_id):
    user_id = message.from_user.id
    task = get_task_by_id(task_id)

    if not task or not is_user_in_project(user_id, task['project_id']):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ–ø—Ä–æ–µ–∫—Ç—É.")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ–ø—Ä–æ–µ–∫—Ç–æ–º,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —Ç.–¥.
    pass

def set_deadline(message, task_id):
    user_id = message.from_user.id
    task = get_task_by_id(task_id)

    if not task or not is_user_in_project(user_id, task['project_id']):
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.")
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):")

    @bot.message_handler(func=lambda m: True)
    def on_deadline_received(m):
        deadline = m.text
        try:
            set_task_deadline(task_id, deadline)
            bot.send_message(user_id, "–î–µ–¥–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu())
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def search(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    @bot.message_handler(func=lambda m: True)
    def on_search_query_received(m):
        search_query = m.text
        results = search_tasks_and_projects(user_id, search_query)

        if not results:
            bot.send_message(user_id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        for result in results:
            item_type = result['type']
            item_title = result['title']
            item_description = result['description']

            if item_type == 'task':
                task_id = result['id']
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                bot.send_message(user_id, f"–ó–∞–¥–∞—á–∞: {item_title}\n\n{item_description}")
            elif item_type == 'project':
                project_id = result['id']
                markup = types.InlineKeyboardMarkup()
                manage_button = types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_project:{project_id}")
                markup.add(manage_button)
                bot.send_message(user_id, f"–ü—Ä–æ–µ–∫—Ç: {item_title}\n\n{item_description}", reply_markup=markup)

# ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)

